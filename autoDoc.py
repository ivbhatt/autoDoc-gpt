import os
import sys
import subprocess
import requests
import argparse
from openai import OpenAI
from github import Github

def clone_repository(url):
    subprocess.run(["git", "clone", url])

def checkout_new_branch(new_branch):
    subprocess.run(["git", "checkout", "-b", new_branch])

def generate_gpt_prompt(directory):
    code_files = []
    for root, dirs, files in os.walk(directory):
        for file in files:
            if file.lower().endswith(('.py', '.c', '.cpp', '.ipynb')):
                code_files.append(os.path.join(root, file))
    gpt_prompt = "## Codebase Overview\n\n"
    gpt_prompt += "The following files were found in the codebase:\n\n"
    for file in code_files:
        relative_path = os.path.relpath(file, directory)
        gpt_prompt += f"### {relative_path}\n"
        with open(file, 'r') as f:
            file_content = f.read()
        gpt_prompt += f"```{os.path.splitext(file)[1][1:]}\n{file_content}\n```\n\n"
    gpt_prompt += "## README Generation\n\n"
    gpt_prompt += "Please generate a README file for this codebase.\n\n"
    return gpt_prompt

def generate_readme(gpt_prompt, api_key):
    client = OpenAI(
    api_key=api_key,
    )    
    chat_completion = client.chat.completions.create(
    messages=[
        {
            "role": "user",
            "content": gpt_prompt,
        }
    ],
    model="gpt-3.5-turbo",
    )
    return chat_completion.choices[0].message.content.strip()

def write_readme_to_file(readme_content):
    with open('README.md', 'w') as f:
        f.write("<i>README generated by: `GPT-DocWriter` <br/> <br/> </i> \n")
        f.write(readme_content)

def commit_and_push(url, branch_name, github_username, github_token):
    subprocess.run(["git", "add", "README.md"])
    subprocess.run(["git", "commit", "-m", "Generated README using GPT-3.5-turbo"])
    repository = url.split("/")[-1]
    remote_url = "https://{}@github.com/{}/{}.git".format(github_token, github_username, repository)
    subprocess.run(["git", "remote", "set-url", "origin", remote_url])
    subprocess.run(["git", "push", "--set-upstream", "origin", branch_name])
    subprocess.run(["git", "push", "-u", "origin", branch_name])

def main():
    parser = argparse.ArgumentParser(description="Generate README using GPT-3.5-turbo")
    parser.add_argument("url", type=str, help="URL to GitHub repository")
    parser.add_argument("api_key", type=str, help="OpenAI API key")
    parser.add_argument("github_username", type=str, help="Github Username")
    parser.add_argument("github_token", type=str, help="Github Oauth token wth repo access")
    parser.add_argument("new_branch", type=str, help="Github Oauth token wth repo access")
    
    
    args = parser.parse_args()

    clone_repository(args.url)
    os.chdir(os.path.basename(args.url))
    checkout_new_branch(args.new_branch)

    gpt_prompt = generate_gpt_prompt(os.getcwd())
    readme_content = generate_readme(gpt_prompt, args.api_key)

    # if not os.path.exists("README.md"):
    write_readme_to_file(readme_content)
    commit_and_push(args.url, args.new_branch, args.github_username, args.github_token)
    readme_url = "{}/tree/{}".format(args.url, args.new_branch)
    print(f"README generated and pushed to remote branch. View it here: {readme_url}")
    # else:
    #     print("README already exists. Skipping generation.")

if __name__ == "__main__":
    main()
